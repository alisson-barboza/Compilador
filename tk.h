#ifndef TOKEN
#define TOKEN

typedef struct tipo_tolken {
	int classificacao;	
	char lexema[30];
}Ttolken;

enum Simbolos {
	TIPO_INT, TIPO_FLOAT, TIPO_CHAR, IDENTIFICADOR, FIM_DE_ARQUIVO, MAIN, IF, ELSE,	WHILE, DO, FOR, INT, FLOAT, CHAR,
	PARENTESIS_ABERTO, CHAVE_ABERTA, VIRGULA, PONTO_E_VIRGULA, PARENTESIS_FECHADO, CHAVE_FECHADA,
	SOMA, MULTIPLICACAO, DIVISAO, SUBTRACAO, ATRIBUICAO, MENOR_QUE, MAIOR_QUE, MENOR_OU_IGUAL, MAIOR_OU_IGUAL, IGUAL,
	DIFERENTE, APOSTROFO, TERMO
};

enum Erros {
	ERRO_PONTO_FLUTUANTE, ERRO_DIFERENTE, ERRO_CARACTER_INVALIDO, ERRO_TIPO_CHAR, ERRO_COMENTARIO_NAO_TERMINADO,
	ERRO_VARIAVEL_DECLARADA, ERRO_VARIAVEL_NAO_DECLARADA, ERRO_TIPOS_INCOMPATIVEIS
};
/*
enum Palavre_Reservada {MAIN, IF, ELSE, WHILE, DO, FOR, INT, FLOAT, CHAR};
enum Especial { PARENTESIS_ABERTO, CHAVE_FECHADA, VIRGULA, PONTO_E_VIRGULA, PARENTESIS_FECHADO, CHAVE_FECHADA };
enum Operador_Aritmetico {SOMA, MULTIPLICACAO, DIVISAO, SUBTRACAO, ATRIBUICAO};
enum Operador_Relacional { MENOR_QUE, MAIOR_QUE, MENOR_OU_IGUAL, MAIOR_OU_IGUAL, IGUAL, DIFERENTE };
*/
#endif


